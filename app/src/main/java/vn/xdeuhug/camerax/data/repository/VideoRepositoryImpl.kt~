package vn.xdeuhug.camerax.data.repository

import android.content.Context
import android.content.pm.PackageManager
import androidx.camera.core.CameraSelector
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.video.FileOutputOptions
import androidx.camera.video.Quality
import androidx.camera.video.QualitySelector
import androidx.camera.video.Recorder
import androidx.camera.video.Recording
import androidx.camera.video.VideoCapture
import androidx.camera.video.VideoRecordEvent
import androidx.camera.view.PreviewView
import androidx.core.content.ContextCompat
import androidx.lifecycle.LifecycleOwner
import timber.log.Timber
import vn.xdeuhug.camerax.data.connection.VideoServiceConnection
import vn.xdeuhug.camerax.domain.repository.VideoRecordingRepository
import java.io.File
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import javax.inject.Inject

/**
 * @Author: NGUYEN XUAN DIEU
 * @Date: 05 / 12 / 2024
 */
class VideoRecordingRepositoryImpl @Inject constructor(
    private val context: Context
) : VideoRecordingRepository {

    private var videoCapture: VideoCapture<Recorder>? = null
    private var activeRecording: Recording? = null
    private var isRecording = false
    private lateinit var cameraExecutor: ExecutorService

    init {
        cameraExecutor = Executors.newSingleThreadExecutor()
    }

    override fun setupCamera(previewView: PreviewView) {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(context)
        cameraProviderFuture.addListener({
            val cameraProvider = cameraProviderFuture.get()
            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            val preview = Preview.Builder().build()
            preview.setSurfaceProvider(previewView.surfaceProvider)

            val recorder = Recorder.Builder()
                .setQualitySelector(QualitySelector.from(Quality.FHD))
                .build()
            videoCapture = VideoCapture.withOutput(recorder)

            try {
                cameraProvider.unbindAll()
                cameraProvider.bindToLifecycle(context as LifecycleOwner, cameraSelector, preview, videoCapture)
            } catch (e: Exception) {
                Timber.e(e, "Camera initialization failed")
            }
        }, ContextCompat.getMainExecutor(context))
    }

    override fun startRecording(outputPath: String) {
        if (isRecording) return
        val file = File(outputPath)

        val outputOptions = FileOutputOptions.Builder(file).build()
        activeRecording = videoCapture?.output?.prepareRecording(context, outputOptions)
            ?.apply {
                if (ContextCompat.checkSelfPermission(
                        context,
                        android.Manifest.permission.RECORD_AUDIO
                    ) == PackageManager.PERMISSION_GRANTED) {
                    withAudioEnabled()
                }
            }
            ?.start(ContextCompat.getMainExecutor(context)) { recordEvent ->
                when (recordEvent) {
                    is VideoRecordEvent.Start -> {
                        isRecording = true
                        // Notify ViewModel/Activity rằng bắt đầu ghi
                    }
                    is VideoRecordEvent.Finalize -> {
                        isRecording = false
                        if (recordEvent.error == VideoRecordEvent.Finalize.ERROR_NONE) {
                            // Video đã được lưu
                        } else {
                            // Lỗi khi ghi video
                        }
                    }
                }
            }
    }

    override fun stopRecording() {
        activeRecording?.stop()
        activeRecording = null
    }

    override fun isRecording(): Boolean {
        return isRecording
    }
}
